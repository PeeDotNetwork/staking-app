const anchor = require("@coral-xyz/anchor");
const { Connection, PublicKey, Keypair } = require("@solana/web3.js");
const { createMint, createAccount, mintTo } = require("@solana/spl-token");
const fs = require("fs");
const path = require("path");
const readline = require("readline");

// Configuration
const DEVNET_RPC = "https://lb.drpc.org/solana-devnet/Aqfm2hO8SEtdr3WkOHEz8w32Snnab04R8LTeEklbR4ac";
const PROGRAM_ID = "Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS";

// Create readline interface
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function promptForPrivateKey() {
  return new Promise((resolve) => {
    rl.question('Enter your private key (base58 encoded): ', (answer) => {
      resolve(answer.trim());
    });
  });
}

async function deployProgram() {
  console.log("🚀 ZK POOP Staking Program Devnet Deployment");
  console.log("=============================================");
  
  try {
    // Get private key securely
    const privateKeyString = await promptForPrivateKey();
    rl.close();
    
    if (!privateKeyString) {
      throw new Error("Private key is required");
    }

    // Create connection
    const connection = new Connection(DEVNET_RPC, "confirmed");
    console.log("✅ Connected to devnet via dRPC");

    // Create wallet from private key
    const privateKeyBytes = anchor.utils.bytes.bs58.decode(privateKeyString);
    const keypair = Keypair.fromSecretKey(privateKeyBytes);
    const wallet = new anchor.Wallet(keypair);
    
    console.log(`📱 Wallet: ${wallet.publicKey.toString()}`);

    // Check balance
    const balance = await connection.getBalance(wallet.publicKey);
    console.log(`💰 Balance: ${balance / 1e9} SOL`);
    
    if (balance < 0.1 * 1e9) {
      console.log("❌ Insufficient balance. Please fund your wallet with devnet SOL");
      console.log("   Visit: https://faucet.solana.com/");
      return;
    }

    // Set up provider
    const provider = new anchor.AnchorProvider(connection, wallet, {
      commitment: "confirmed"
    });
    anchor.setProvider(provider);

    // Load program IDL (this would normally be generated by anchor build)
    console.log("📝 Note: Program must be built and deployed using 'anchor deploy'");
    console.log("   This script demonstrates the deployment process");

    // Create test tokens for staking pool setup
    console.log("\n🪙 Creating test tokens...");
    
    // Create staking token (representing the token users will stake)
    const stakingMint = await createMint(
      connection,
      keypair,
      wallet.publicKey,
      null,
      9, // 9 decimals
    );
    console.log(`   Staking Token: ${stakingMint.toString()}`);

    // Create reward token ($WePee)
    const rewardMint = await createMint(
      connection,
      keypair,
      wallet.publicKey,
      null,
      9, // 9 decimals
    );
    console.log(`   Reward Token ($WePee): ${rewardMint.toString()}`);

    // Create user token accounts
    const userStakingAccount = await createAccount(
      connection,
      keypair,
      stakingMint,
      wallet.publicKey
    );
    console.log(`   User Staking Account: ${userStakingAccount.toString()}`);

    const userRewardAccount = await createAccount(
      connection,
      keypair,
      rewardMint,
      wallet.publicKey
    );
    console.log(`   User Reward Account: ${userRewardAccount.toString()}`);

    // Mint some test tokens
    await mintTo(
      connection,
      keypair,
      stakingMint,
      userStakingAccount,
      wallet.publicKey,
      10000 * 1e9 // 10,000 tokens
    );
    console.log("   ✅ Minted 10,000 test staking tokens");

    await mintTo(
      connection,
      keypair,
      rewardMint,
      userRewardAccount,
      wallet.publicKey,
      1000000 * 1e9 // 1,000,000 $WePee tokens for rewards
    );
    console.log("   ✅ Minted 1,000,000 $WePee reward tokens");

    // Save deployment configuration
    const deploymentConfig = {
      network: "devnet",
      rpcUrl: DEVNET_RPC,
      programId: PROGRAM_ID,
      deployer: wallet.publicKey.toString(),
      stakingMint: stakingMint.toString(),
      rewardMint: rewardMint.toString(),
      userStakingAccount: userStakingAccount.toString(),
      userRewardAccount: userRewardAccount.toString(),
      deployedAt: new Date().toISOString()
    };

    const configPath = path.join(__dirname, "../deployment-config.json");
    fs.writeFileSync(configPath, JSON.stringify(deploymentConfig, null, 2));
    console.log(`\n💾 Deployment config saved to: ${configPath}`);

    console.log("\n🎉 Deployment preparation complete!");
    console.log("\n📋 Next steps:");
    console.log("   1. Run 'anchor build' to compile the program");
    console.log("   2. Run 'anchor deploy --provider.cluster devnet' to deploy");
    console.log("   3. Initialize the staking pool with the created tokens");
    console.log("   4. Update frontend with the deployed program ID and token addresses");

    console.log("\n🔧 Program Instructions Available:");
    console.log("   • initialize_pool - Set up the staking pool");
    console.log("   • initialize_user - Create user staking account");
    console.log("   • stake - Stake tokens with lock periods (1d, 1w, 3m, 6m)");
    console.log("   • unstake - Unstake after lock period expires");
    console.log("   • emergency_unstake - Unstake early with penalty");
    console.log("   • claim_rewards - Claim accumulated $WePee rewards");
    console.log("   • set_paused - Admin pause/unpause (emergency stop)");

    console.log("\n🛡️ Security Features:");
    console.log("   • Flash loan protection");
    console.log("   • Rate limiting (max 5 stakes, 2 emergency unstakes per hour)");
    console.log("   • Sybil attack detection");
    console.log("   • Progressive penalty system (33% max, decreases over time)");
    console.log("   • Account consistency validation");
    console.log("   • Reward calculation verification");

  } catch (error) {
    console.error("❌ Deployment failed:", error.message);
    console.error(error);
  }
}

// Run deployment
if (require.main === module) {
  deployProgram().catch(console.error);
}

module.exports = { deployProgram };